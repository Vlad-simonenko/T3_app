// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                       Int     @id @default(autoincrement())
  userId                   Int
  email                    String?
  user_id                  Int?
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email        String?
  @@index([userId])
}

model User {
  id            Int        @id @default(autoincrement())
  name          String?
  email         String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  Subtasks      Subtasks[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id        Int        @id @default(autoincrement())
  title     String
  content   String?
  published Boolean    @default(false)
  userId    Int
  author    User       @relation(fields: [userId], references: [id])
  Subtasks  Subtasks[]
  createdAt DateTime @default(now())
  addedUsers Int[]
  
  @@unique([createdAt, id])
}

model Subtasks {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  userId    Int
  author    User    @relation(fields: [userId], references: [id])
  Task      Task?   @relation(fields: [taskId], references: [id])
  taskId    Int?
  createdAt DateTime @default(now())
  addedUsers Int[]


  @@unique([createdAt, id])
}
